/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.ProductController;
import controller.ProductRegistrationController;

import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import webservices.Product;
import webservices.ProductRegistration;

/**
 *
 * @author Sherg
 */
public class GUIListAllProductsRegistrations extends javax.swing.JFrame {

    private final ProductController productController;
    private final ProductRegistrationController productRegistrationController;

    /**
     * Creates new form GUIListAllProductsRegistrations
     */
    public GUIListAllProductsRegistrations(ProductController pProductController,
                                           ProductRegistrationController pProductRegistrationController) {
        initComponents();

        this.productController = pProductController;
        this.productRegistrationController = pProductRegistrationController;

        this.loadTableData();
        this.loadDataFilter();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        panelListProductRegistration = new javax.swing.JPanel();
        labProductType = new javax.swing.JLabel();
        labRegistrationState = new javax.swing.JLabel();
        comboSate = new javax.swing.JComboBox<String>();
        comboProductType = new javax.swing.JComboBox<String>();
        labTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableProdcutRegistrations = new javax.swing.JTable();
        btnRefresh = new javax.swing.JButton();
        btnFilter = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Lista de Registros");

        panelListProductRegistration.setBorder(javax.swing.BorderFactory.createTitledBorder("Filtrar por"));

        labProductType.setText("Tipo de producto:");

        labRegistrationState.setText("Estado del registro:");

        comboSate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "Activo", "Inactivo" }));

        comboProductType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout panelListProductRegistrationLayout = new javax.swing.GroupLayout(panelListProductRegistration);
        panelListProductRegistration.setLayout(panelListProductRegistrationLayout);
        panelListProductRegistrationLayout.setHorizontalGroup(
            panelListProductRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelListProductRegistrationLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labProductType)
                .addGap(3, 3, 3)
                .addComponent(comboProductType, 0, 153, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labRegistrationState)
                .addGap(3, 3, 3)
                .addComponent(comboSate, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelListProductRegistrationLayout.setVerticalGroup(
            panelListProductRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelListProductRegistrationLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(panelListProductRegistrationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labProductType)
                    .addComponent(labRegistrationState, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboProductType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSate))
                .addContainerGap())
        );

        labTitle.setFont(new java.awt.Font("Lucida Calligraphy", 0, 24)); // NOI18N
        labTitle.setText("Productos Registrados ");

        tableProdcutRegistrations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Código del producto", "Cliente", "Número de producto", "Saldo", "Fecha de registro", "Fecha de expiracion", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableProdcutRegistrations);

        btnRefresh.setText("Recargar Registros");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnFilter.setText("Filtrar Registros");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labTitle)
                .addGap(222, 222, 222))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(panelListProductRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh))
                .addContainerGap(58, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labTitle)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelListProductRegistration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                        .addComponent(btnFilter)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRefresh)
                        .addGap(23, 23, 23)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        pack();
    }//GEN-END:initComponents

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        List<ProductRegistration> listProdcutRegistration = productRegistrationController.listAllProductRegistrations();

        String strProductType = comboProductType.getSelectedItem().toString();
        String strState = comboSate.getSelectedItem().toString();

        if (strProductType.equals("") && strState.equals("")) {
            JOptionPane.showMessageDialog(this, "Por favor seleccionar un parámetro de filtrado", "Advertencia",
                                          JOptionPane.WARNING_MESSAGE);
        } else {
            DefaultTableModel model = (DefaultTableModel) tableProdcutRegistrations.getModel();
            model.setRowCount(0);

            if (!strState.equals("") && strProductType.equals("")) {
                boolean state = comboSate.getSelectedItem().toString().equals("Activo") ? true : false;

                for (ProductRegistration productRegistration : listProdcutRegistration) {
                    if (productRegistration.isState() == state) {
                        model.addRow(new Object[] {
                                     productRegistration.getProductCode(), productRegistration.getClientId(),
                                     productRegistration.getProductNumber(), productRegistration.getBalance(),
                                     productRegistration.getRegistratioDate().toString(),
                                     productRegistration.getExpirationDate().toString(), productRegistration.isState()
                        });
                    }
                }
            } else if (!strProductType.equals("") && strState.equals("")) {
                List<Product> listProduct = productController.listAllProducts();
                int productCode = -1;
                for (Product product : listProduct) {
                    if (product.getName().equals(strProductType)) {
                        productCode = product.getCode();
                    }
                }

                for (ProductRegistration productRegistration : listProdcutRegistration) {

                    if (productRegistration.getProductCode() == productCode) {
                        model.addRow(new Object[] {
                                     productRegistration.getProductCode(), productRegistration.getClientId(),
                                     productRegistration.getProductNumber(), productRegistration.getBalance(),
                                     productRegistration.getRegistratioDate().toString(),
                                     productRegistration.getExpirationDate().toString(), productRegistration.isState()
                        });
                    }
                }
            } else {
                boolean state = comboSate.getSelectedItem().toString().equals("Activo") ? true : false;
                List<Product> listProduct = productController.listAllProducts();
                int productCode = -1;
                for (Product product : listProduct) {
                    if (product.getName().equals(strProductType)) {
                        productCode = product.getCode();
                    }
                }

                for (ProductRegistration productRegistration : listProdcutRegistration) {
                    if (productRegistration.getProductCode() == productCode && productRegistration.isState() == state) {
                        model.addRow(new Object[] {
                                     productRegistration.getProductCode(), productRegistration.getClientId(),
                                     productRegistration.getProductNumber(), productRegistration.getBalance(),
                                     productRegistration.getRegistratioDate().toString(),
                                     productRegistration.getExpirationDate().toString(), productRegistration.isState()
                        });
                    }
                }
            }
        }
    }//GEN-LAST:event_btnFilterActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        this.loadTableData();
    }//GEN-LAST:event_btnRefreshActionPerformed
    
    public void loadDataFilter() {
        comboSate.removeAllItems();
        comboSate.addItem("");
        comboSate.addItem("Activo");
        comboSate.addItem("Inactivo");

        comboProductType.removeAllItems();
        comboProductType.addItem("");
        List<Product> listProduct = productController.listAllProducts();
        for (Product product : listProduct) {
            comboProductType.addItem(product.getName());
        }
    }

    public void loadTableData() {
        List<ProductRegistration> listProdcutRegistration = productRegistrationController.listAllProductRegistrations();

        DefaultTableModel model = (DefaultTableModel) tableProdcutRegistrations.getModel();
        model.setRowCount(0);

        for (ProductRegistration productRegistration : listProdcutRegistration) {
            model.addRow(new Object[] {
                         productRegistration.getProductCode(), productRegistration.getClientId(),
                         productRegistration.getProductNumber(), productRegistration.getBalance(),
                         productRegistration.getRegistratioDate().toString(),
                         productRegistration.getExpirationDate().toString(),
                         (productRegistration.isState() ? "Activo" : "Inactivo")
            });
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JComboBox<String> comboProductType;
    private javax.swing.JComboBox<String> comboSate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labProductType;
    private javax.swing.JLabel labRegistrationState;
    private javax.swing.JLabel labTitle;
    private javax.swing.JPanel panelListProductRegistration;
    private javax.swing.JTable tableProdcutRegistrations;
    // End of variables declaration//GEN-END:variables
}
